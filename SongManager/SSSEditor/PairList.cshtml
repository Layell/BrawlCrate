@using SSSEditor
@inherits PairListPageBase

<!DOCTYPE html>

<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=8" />
    <title>SSS Editor Demo Page</title>
    <script type="text/javascript">
        @Raw(SSSEditor.Resources.JQuery)

        var icons = [@Raw(Model.iconsJSON)][0];

        var songsByStage = [@Raw(Model.songsByStageJSON)][0];

        var newRowsAdded = 0;

        function getDefinitions() {
            return JSON.stringify($("#pairDefinitions .stageRow").map(function () {
                return {
                    stage: +$("select.stagename", this).val(),
                    icon: +$("input.iconID", this).val()
                };
            }).get());
        }

        function getScreen1() {
            return JSON.stringify($("#screen1 .stageRow").map(function () {
                return +$("input.defIndex", this).val()
            }).get());
        }

        function getScreen2() {
            return JSON.stringify($("#screen2 .stageRow").map(function () {
                return +$("input.defIndex", this).val()
            }).get());
        }

        function getColorForIndex(index) {
            return index == 0x1E ? "yellow"
                : index < 0x1F ? "green"
                : index < 0x29 ? "darkgreen"
                : index >= 55 ? "orange"
                : "red";
        }

        var stage_options = "";
        @foreach (KeyValuePair<byte, string> kvpair in PairListModel.StagesByID) {
            <text>stage_options += "<option value='@kvpair.Key'>@kvpair.Value</option>";</text>
        }

        $(function () {
            if (navigator.userAgent.indexOf("MSIE") >= 0) {
                if (!("documentMode" in document) || document.documentMode < 8) {
                    alert("SSS Editor requires Internet Explorer 8 or higher.");
                    return;
                }
            }
            $("select.stagename").html(stage_options);

            $(".stageRow").each(function (i, e) {
                var stageId = parseInt($(".stageIDDisplay", e).text(), 16);
                var iconId = parseInt($(".iconIDDisplay", e).text(), 16);
                $("img.icon", e).attr("src", "data:image/png;base64," + icons[iconId]);
                $("select.stagename", e).val(stageId);
                if (songsByStage[stageId]) {
                    $(".songFilename", e).text(songsByStage[stageId].Filename);
                }
            });

            $("#pairDefinitions .stageRow").each(function (i, e) {
                $(".colorCode", e).css("background-color", getColorForIndex(i));
            });

            $(".columns").on("change", "input.iconID", function () {
                var iconId = +$(this).val();

                var str = iconId.toString(16);
                if (str.length == 1) str = "0" + str;

                var defClassName = $(this).parents(".stageRow")[0].className.match(/def[^ ]*/)[0];
                $("." + defClassName + " img.icon").attr("src", "data:image/png;base64," + icons[iconId]);
                $("." + defClassName + " .iconIDDisplay").text(str);
                $("." + defClassName + " input.iconID").val(iconId);
            });

            $(".columns").on("change", "input.stageID, select.stagename", function () {
                var stageId = +$(this).val();

                var str = stageId.toString(16);
                if (str.length == 1) str = "0" + str;

                var defClassName = $(this).parents(".stageRow")[0].className.match(/def[^ ]*/)[0];
                $("." + defClassName + " .stageIDDisplay").text(str);
                $("." + defClassName + " input.stageID").val(stageId);
                $("." + defClassName + " select.stagename").val(stageId);
                $("." + defClassName + " .songFilename").text(songsByStage[stageId] ? songsByStage[stageId].Filename : "");
            });

            $(".columns").on("change", "input.defIndex", function () {
                var defId = +$(this).val();
                var defRow = $("#pairDefinitions .stageRow").eq(defId);

                var thisRow = $(this).parents(".stageRow");

                // Untie from old first-column entry (if tied to any)
                var oldDefClassNameMatch = thisRow[0].className.match(/def[^ ]*/);
                if (oldDefClassNameMatch) thisRow.removeClass(oldDefClassNameMatch[0]);

                if (defRow.length == 0) {
                    thisRow.find("img.icon").attr("src", "");
                    thisRow.find("input.iconID").val("");
                    thisRow.find(".iconIDDisplay").text("xx");
                    thisRow.find(".stageIDDisplay").text("xx");
                    thisRow.find("input.stageID").val("");
                    thisRow.find("select.stagename").val("");
                } else {
                    thisRow.find("img.icon").attr("src", defRow.find("img.icon").attr("src"));
                    thisRow.find("input.iconID").val(defRow.find("input.iconID").val());
                    thisRow.find(".iconIDDisplay").text(defRow.find(".iconIDDisplay").text());
                    thisRow.find(".stageIDDisplay").text(defRow.find(".stageIDDisplay").text());
                    thisRow.find("input.stageID").val(defRow.find("input.stageID").val());
                    thisRow.find("select.stagename").val(defRow.find("select.stagename").val());
                    thisRow.find(".songFilename").text(defRow.find(".songFilename").text());

                    // Tie to corresponding first-column entry
                    var newDefClassName = defRow[0].className.match(/def[^ ]*/)[0];
                    thisRow.addClass(newDefClassName);
                }
            });

            $(".columns").on("click", "input.up", function () {
                var row = $(this).parents(".stageRow");
                var defClassName = row[0].className.match(/def[^ ]*/)[0];
                var previous = row.prev();

                if (previous.length > 0) {
                    var previousDefClassName = previous[0].className.match(/def[^ ]*/)[0];
                    row.insertBefore(previous);
                    if (row.parents("#pairDefinitions").length > 0) {
                        // First column - swap input-box values for these rows, and rows in other columns
                        var previousIndex = +previous.find("input.defIndex").val();
                        var index = +row.find("input.defIndex").val();
                        $("." + defClassName + " input.defIndex").val(previousIndex);
                        $("." + previousDefClassName + " input.defIndex").val(index);
                    }
                    // Swap index display for these rows only
                    var previousIndexStr = previous.find(".indexDisplay").text();
                    var indexStr = row.find(".indexDisplay").text();
                    row.find(".indexDisplay").text(previousIndexStr);
                    previous.find(".indexDisplay").text(indexStr);
                }

                $(this).focus();
            });

            $(".columns").on("click", "input.down", function () {
                var row = $(this).parents(".stageRow");
                var defClassName = row[0].className.match(/def[^ ]*/)[0];
                var next = row.next();

                if (next.length > 0) {
                    var nextDefClassName = next[0].className.match(/def[^ ]*/)[0];
                    row.insertAfter(next);
                    if (row.parents("#pairDefinitions").length > 0) {
                        // First column - swap input-box values for these rows, and rows in other columns
                        var nextIndex = +next.find("input.defIndex").val();
                        var index = +row.find("input.defIndex").val();
                        $("." + defClassName + " input.defIndex").val(nextIndex);
                        $("." + nextDefClassName + " input.defIndex").val(index);
                        // Update color codes
                        row.find(".colorCode").css("background-color", getColorForIndex(nextIndex));
                        next.find(".colorCode").css("background-color", getColorForIndex(index));
                    }
                    // Swap index display for these rows only
                    var nextIndexStr = next.find(".indexDisplay").text();
                    var indexStr = row.find(".indexDisplay").text();
                    row.find(".indexDisplay").text(nextIndexStr);
                    next.find(".indexDisplay").text(indexStr);
                }

                $(this).focus();
            });

            $(".columns").on("click", "input.delete", function () {
                if (confirm("Are you sure you want to delete this entry?")) {
                    var row = $(this).parents(".stageRow");

                    var isFirstColumn = row.parents("#pairDefinitions").length == 1

                    var index = +row.find(".indexDisplay").text();
                    for (var next = row.next() ; next.length == 1; next = next.next()) {
                        // Change index display
                        next.find(".indexDisplay").text(index + ".");
                        if (isFirstColumn) {
                            // Change input-box value to match (update for all columns)
                            var nextDefClassName = next[0].className.match(/def[^ ]*/)[0];
                            $("." + nextDefClassName + " input.defIndex").val(index);
                            // Update color code
                            next.find(".colorCode").css("background-color", getColorForIndex(index));
                        }
                        index++;
                    }

                    if (isFirstColumn) {
                        // Update any abandoned entries in second/third columns to point to top first-column entry instead
                        var defClassName = row[0].className.match(/def[^ ]*/)[0];
                        $("." + defClassName + " input.defIndex:enabled").val(0).change();
                    }
                    row.remove();
                }
            });

            $(".columns").on("click", "input.add", function () {
                var rowContainer = $(this).parents(".column").find(".main");
                var newIndex = rowContainer.children().length;

                var row = rowContainer.children().eq(0);
                var newRow = $("<div class='stageRow'></div>")
                newRow.addClass("defOrigNew" + (++newRowsAdded));
                newRow.html(row.html());
                rowContainer.append(newRow);

                // Change index display
                newRow.find(".indexDisplay").text(newIndex + ".");
                if (newRow.parents("#pairDefinitions").length == 1) {
                    // Change input-box value to match
                    newRow.find("input.defIndex").val(newIndex);
                    // Update color code
                    newRow.find(".colorCode").css("background-color", getColorForIndex(newIndex));
                }
            });
        });
    </script>
    <style type="text/css">
		html, body {
			height: 100%;
			margin: 0;
		}
	
        body {
			background-color: Window;
			color: WindowText;
            font-family: Arial, Helvetica, sans-serif;
            font-size: 10pt;
        }
		
		.columns {
			box-sizing: border-box;
			height: 100%;
			padding: 8px;
		}

        .column {
            width: 370px;
            display: inline-block;
            vertical-align: top;
			
			margin: 4px;
			
			box-sizing: border-box;
			height: 100%;
			padding-bottom: 68px;
        }

        .columnHeader {
            text-align: center;
            font-weight: bold;
			line-height: 32px;
        }

        .column > .main {
            border: 1px solid #707070;
            height: 100%;
            overflow-y: scroll;
        }
		
		.column > .buttons {
			text-align: center;
			line-height: 32px;
		}
		
		.column > .buttons > input {
			width: 50%;
		}

        .stageRow {
            background-color: lightgray;
            border: 1px solid #707070;
            overflow: auto;
            margin: 8px;
            padding: 2px;

            line-height: 26px;
        }

        .stageRow .songFilename{
            font-size: 8pt;
        }

        .stageRow .colorCode {
            float: left;
            width: 8px;
            height: 56px;
        }

        .stageRow img.icon {
            float: left;
            margin-right: 2px;
        }

        .stageRow .indexDisplay {
            font-weight: bold;
			display: inline-block;
			width: 16px;
		}

        .stageRow select.stagename {
			width: 150px;
		}

        .stageIDDisplay, .iconIDDisplay {
            font-family: monospace;
        }

        input.iconID, input.stageID, input.defIndex {
            width: 40px;
        }

        .stageRow input.up, .stageRow input.down, .stageRow input.delete {
            width: 22px;
            height: 22px;
        }

        .stageRow input.delete {
            float: right;
        }
    </style>
</head>
<body>
    <div class="columns">
        <div class="column">
            <div class="columnHeader">Stage/Icon Pairs</div>
            <div id="pairDefinitions" class="main">
                @for (int i = 0; i < Model.pairs.Count; i++) {
                    ModelPair pair = Model.pairs[i];
                    <div class="stageRow def@(i)">
                        <div class="colorCode"></div>
                        <img width="64" height="56" class="icon" />
                        <span class="indexDisplay">@i.</span>
                        <select class="stagename"></select>
                        <span class="songFilename"></span>
                        <input type="button" class="delete" value="x" />
                        <br />
                        <input class="defIndex" value="@i" disabled />
                        <input class="stageID" value="@pair.stage" type="number" />
                        <span class="stageIDDisplay">@pair.stage.ToString("X2")</span>
                        <span class="iconIDDisplay">@pair.icon.ToString("X2")</span>
                        <input class="iconID" value="@pair.icon" type="number" />
                        <input class="up" value="^" type="button" />
                        <input class="down" value="v" type="button" />
                    </div>
                }
            </div>
            <div class="buttons">
                <input type="button" class="add" value="Add (+)" />
            </div>
        </div>
        <div class="column">
            <div class="columnHeader">Page 1 / Brawl</div>
            <div id="screen1" class="main">
                @for (int i = 0; i < Model.screen1.Length; i++) {
                    int defID = Model.screen1[i];
                    ModelPair pair = Model.pairs[defID];
                    <div class="stageRow def@(defID)">
                        <img width="64" height="56" class="icon" />
                        <span class="indexDisplay">@i.</span>
                        <select class="stagename" disabled></select>
                        <span class="songFilename"></span>
                        <input type="button" class="delete" value="x" />
                        <br />
                        <input class="defIndex" value="@defID" />
                        <input class="stageID" value="@pair.stage" type="number" disabled />
                        <span class="stageIDDisplay">@pair.stage.ToString("X2")</span>
                        <span class="iconIDDisplay">@pair.icon.ToString("X2")</span>
                        <input class="iconID" value="@pair.icon" type="number" disabled />
                        <input class="up" value="^" type="button" />
                        <input class="down" value="v" type="button" />
                    </div>
                }
            </div>
            <div class="buttons">
                <input type="button" class="add" value="Add (+)" />
            </div>
        </div>
        <div class="column">
            <div class="columnHeader">Page 2 / Melee</div>
            <div id="screen2" class="main">
                @for (int i = 0; i < Model.screen2.Length; i++) {
                    int defID = Model.screen2[i];
                    ModelPair pair = Model.pairs[defID];
                    <div class="stageRow def@(defID)">
                        <img width="64" height="56" class="icon" />
                        <span class="indexDisplay">@i.</span>
                        <select class="stagename" disabled></select>
                        <span class="songFilename"></span>
                        <input type="button" class="delete" value="x" />
                        <br />
                        <input class="defIndex" value="@defID" />
                        <input class="stageID" value="@pair.stage" type="number" disabled />
                        <span class="stageIDDisplay">@pair.stage.ToString("X2")</span>
                        <span class="iconIDDisplay">@pair.icon.ToString("X2")</span>
                        <input class="iconID" value="@pair.icon" type="number" disabled />
                        <input class="up" value="^" type="button" />
                        <input class="down" value="v" type="button" />
                    </div>
                }
            </div>
            <div class="buttons">
                <input type="button" class="add" value="Add (+)" />
            </div>
        </div>
    </div>
</body>
</html>